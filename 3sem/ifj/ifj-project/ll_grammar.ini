EPSILON = Îµ

; FIRST(EXPR) = { tt_lit_Int, tt_lit_Double, 
;     tt_lit_String, tt_lit_Bool, tt_ident, tt_left_paren }
EXPR = <EXPR from precedence parser>

; rules EXPR_OR_CALL and EXPR_OPT cannot be represented in LL1 parser,
; we will resolve these manually in the parser by looking two tokens ahead
EXPR_OR_CALL = EXPR
EXPR_OR_CALL = tt_ident CALL

EXPR_OPT = EXPR
EXPR_OPT = EPSILON

; rule representing the whole file
FILE = STMT_LIST tt_EOF

; first token of STMT will be checked manually,
; whether it was preceeded by newline;
; this is done to avoid introducing a separate newline token,
; which would complicate the grammar
STMT_LIST = EPSILON
STMT_LIST = <newl> STMT STMT_LIST

TYPE = tt_kw_Double
TYPE = tt_kw_Double_opt
TYPE = tt_kw_Int
TYPE = tt_kw_Int_opt
TYPE = tt_kw_String
TYPE = tt_kw_String_opt
TYPE = tt_kw_Bool
TYPE = tt_kw_Bool_opt

STMT = STMT_FUNC_DEF
STMT = STMT_LET
STMT = STMT_VAR
STMT = tt_ident STMT_IDENT
STMT = STMT_IF
STMT = STMT_WHILE
STMT = STMT_RETURN

; function definition

STMT_FUNC_DEF = tt_kw_func tt_ident
  tt_left_paren PARAM_LIST tt_right_paren
  RETURN_TYPE
  tt_left_curly STMT_LIST tt_right_curly

PARAM_LIST = EPSILON
PARAM_LIST = PARAM PARAM_REST

PARAM_REST = tt_comma PARAM PARAM_REST
PARAM_REST = EPSILON

PARAM = OPT_IDENT OPT_IDENT tt_colon TYPE
OPT_IDENT = tt_ident
OPT_IDENT = tt_underscore

RETURN_TYPE = EPSILON
RETURN_TYPE = tt_arrow TYPE

; variable declaration, definition

STMT_LET = tt_kw_let tt_ident DECL

STMT_VAR = tt_kw_var tt_ident DECL

DECL = tt_colon TYPE DEF
DECL = tt_assign EXPR_OR_CALL

DEF = tt_assign EXPR_OR_CALL
DEF = EPSILON

; variable assignment / function call

STMT_IDENT = tt_assign EXPR_OR_CALL
STMT_IDENT = CALL

CALL = tt_left_paren ARGUMENT_LIST tt_right_paren

ARGUMENT_LIST = EPSILON
ARGUMENT_LIST = ARGUMENT ARGUMENT_REST

ARGUMENT_REST = tt_comma ARGUMENT ARGUMENT_REST
ARGUMENT_REST = EPSILON

ARGUMENT = tt_ident OPT_TERM
ARGUMENT = LITERAL

OPT_TERM = EPSILON
OPT_TERM = tt_colon TERM

TERM = tt_ident
TERM = LITERAL

LITERAL = tt_lit_Int
LITERAL = tt_lit_Double
LITERAL = tt_lit_String
LITERAL = tt_lit_Bool
LITERAL = tt_kw_nil

; if statement

STMT_IF = tt_kw_if
  IF_CONDITION
  tt_left_curly STMT_LIST tt_right_curly
  tt_kw_else
  tt_left_curly STMT_LIST tt_right_curly

IF_CONDITION = EXPR
IF_CONDITION = tt_kw_let tt_ident

; while statement

STMT_WHILE = tt_kw_while
  EXPR
  tt_left_curly STMT_LIST tt_right_curly

STMT_RETURN = tt_kw_return EXPR_OPT
