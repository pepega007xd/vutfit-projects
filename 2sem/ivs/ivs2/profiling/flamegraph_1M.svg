<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="870" onload="init(evt)" viewBox="0 0 1200 870" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="870" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="853.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="853.00"> </text><svg id="frames" x="10" width="1180" total_samples="787"><g><title>[unknown] (2 samples, 0.25%)</title><rect x="0.0000%" y="773" width="0.2541%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="2"/><text x="0.2500%" y="783.50"></text></g><g><title>[unknown] (1 samples, 0.13%)</title><rect x="0.1271%" y="757" width="0.1271%" height="15" fill="rgb(217,0,24)" fg:x="1" fg:w="1"/><text x="0.3771%" y="767.50"></text></g><g><title>[unknown] (1 samples, 0.13%)</title><rect x="0.1271%" y="741" width="0.1271%" height="15" fill="rgb(221,193,54)" fg:x="1" fg:w="1"/><text x="0.3771%" y="751.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read_to_string::{{closure}} (9 samples, 1.14%)</title><rect x="0.2541%" y="453" width="1.1436%" height="15" fill="rgb(248,212,6)" fg:x="2" fg:w="9"/><text x="0.5041%" y="463.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read_to_end (9 samples, 1.14%)</title><rect x="0.2541%" y="437" width="1.1436%" height="15" fill="rgb(208,68,35)" fg:x="2" fg:w="9"/><text x="0.5041%" y="447.50"></text></g><g><title>&lt;std::io::stdio::StdinRaw as std::io::Read&gt;::read_to_end (9 samples, 1.14%)</title><rect x="0.2541%" y="421" width="1.1436%" height="15" fill="rgb(232,128,0)" fg:x="2" fg:w="9"/><text x="0.5041%" y="431.50"></text></g><g><title>std::io::Read::read_to_end (9 samples, 1.14%)</title><rect x="0.2541%" y="405" width="1.1436%" height="15" fill="rgb(207,160,47)" fg:x="2" fg:w="9"/><text x="0.5041%" y="415.50"></text></g><g><title>std::io::default_read_to_end (9 samples, 1.14%)</title><rect x="0.2541%" y="389" width="1.1436%" height="15" fill="rgb(228,23,34)" fg:x="2" fg:w="9"/><text x="0.5041%" y="399.50"></text></g><g><title>std::io::Read::read_buf (9 samples, 1.14%)</title><rect x="0.2541%" y="373" width="1.1436%" height="15" fill="rgb(218,30,26)" fg:x="2" fg:w="9"/><text x="0.5041%" y="383.50"></text></g><g><title>std::io::default_read_buf (9 samples, 1.14%)</title><rect x="0.2541%" y="357" width="1.1436%" height="15" fill="rgb(220,122,19)" fg:x="2" fg:w="9"/><text x="0.5041%" y="367.50"></text></g><g><title>std::io::readbuf::BorrowedCursor::ensure_init (9 samples, 1.14%)</title><rect x="0.2541%" y="341" width="1.1436%" height="15" fill="rgb(250,228,42)" fg:x="2" fg:w="9"/><text x="0.5041%" y="351.50"></text></g><g><title>core::intrinsics::write_bytes (9 samples, 1.14%)</title><rect x="0.2541%" y="325" width="1.1436%" height="15" fill="rgb(240,193,28)" fg:x="2" fg:w="9"/><text x="0.5041%" y="335.50"></text></g><g><title>__memset_avx2_unaligned_erms (9 samples, 1.14%)</title><rect x="0.2541%" y="309" width="1.1436%" height="15" fill="rgb(216,20,37)" fg:x="2" fg:w="9"/><text x="0.5041%" y="319.50"></text></g><g><title>[unknown] (9 samples, 1.14%)</title><rect x="0.2541%" y="293" width="1.1436%" height="15" fill="rgb(206,188,39)" fg:x="2" fg:w="9"/><text x="0.5041%" y="303.50"></text></g><g><title>[unknown] (8 samples, 1.02%)</title><rect x="0.3812%" y="277" width="1.0165%" height="15" fill="rgb(217,207,13)" fg:x="3" fg:w="8"/><text x="0.6312%" y="287.50"></text></g><g><title>[unknown] (7 samples, 0.89%)</title><rect x="0.5083%" y="261" width="0.8895%" height="15" fill="rgb(231,73,38)" fg:x="4" fg:w="7"/><text x="0.7583%" y="271.50"></text></g><g><title>[unknown] (7 samples, 0.89%)</title><rect x="0.5083%" y="245" width="0.8895%" height="15" fill="rgb(225,20,46)" fg:x="4" fg:w="7"/><text x="0.7583%" y="255.50"></text></g><g><title>[unknown] (7 samples, 0.89%)</title><rect x="0.5083%" y="229" width="0.8895%" height="15" fill="rgb(210,31,41)" fg:x="4" fg:w="7"/><text x="0.7583%" y="239.50"></text></g><g><title>[unknown] (7 samples, 0.89%)</title><rect x="0.5083%" y="213" width="0.8895%" height="15" fill="rgb(221,200,47)" fg:x="4" fg:w="7"/><text x="0.7583%" y="223.50"></text></g><g><title>[unknown] (7 samples, 0.89%)</title><rect x="0.5083%" y="197" width="0.8895%" height="15" fill="rgb(226,26,5)" fg:x="4" fg:w="7"/><text x="0.7583%" y="207.50"></text></g><g><title>[unknown] (7 samples, 0.89%)</title><rect x="0.5083%" y="181" width="0.8895%" height="15" fill="rgb(249,33,26)" fg:x="4" fg:w="7"/><text x="0.7583%" y="191.50"></text></g><g><title>[unknown] (7 samples, 0.89%)</title><rect x="0.5083%" y="165" width="0.8895%" height="15" fill="rgb(235,183,28)" fg:x="4" fg:w="7"/><text x="0.7583%" y="175.50"></text></g><g><title>[unknown] (6 samples, 0.76%)</title><rect x="0.6353%" y="149" width="0.7624%" height="15" fill="rgb(221,5,38)" fg:x="5" fg:w="6"/><text x="0.8853%" y="159.50"></text></g><g><title>[unknown] (5 samples, 0.64%)</title><rect x="0.7624%" y="133" width="0.6353%" height="15" fill="rgb(247,18,42)" fg:x="6" fg:w="5"/><text x="1.0124%" y="143.50"></text></g><g><title>&lt;std::io::stdio::Stdin as std::io::Read&gt;::read_to_string (14 samples, 1.78%)</title><rect x="0.2541%" y="517" width="1.7789%" height="15" fill="rgb(241,131,45)" fg:x="2" fg:w="14"/><text x="0.5041%" y="527.50">&lt;..</text></g><g><title>&lt;std::io::stdio::StdinLock as std::io::Read&gt;::read_to_string (14 samples, 1.78%)</title><rect x="0.2541%" y="501" width="1.7789%" height="15" fill="rgb(249,31,29)" fg:x="2" fg:w="14"/><text x="0.5041%" y="511.50">&lt;..</text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read_to_string (14 samples, 1.78%)</title><rect x="0.2541%" y="485" width="1.7789%" height="15" fill="rgb(225,111,53)" fg:x="2" fg:w="14"/><text x="0.5041%" y="495.50">&lt;..</text></g><g><title>std::io::append_to_string (14 samples, 1.78%)</title><rect x="0.2541%" y="469" width="1.7789%" height="15" fill="rgb(238,160,17)" fg:x="2" fg:w="14"/><text x="0.5041%" y="479.50">s..</text></g><g><title>core::str::converts::from_utf8 (5 samples, 0.64%)</title><rect x="1.3977%" y="453" width="0.6353%" height="15" fill="rgb(214,148,48)" fg:x="11" fg:w="5"/><text x="1.6477%" y="463.50"></text></g><g><title>core::str::validations::run_utf8_validation (5 samples, 0.64%)</title><rect x="1.3977%" y="437" width="0.6353%" height="15" fill="rgb(232,36,49)" fg:x="11" fg:w="5"/><text x="1.6477%" y="447.50"></text></g><g><title>&lt;F as core::str::pattern::MultiCharEq&gt;::matches (2 samples, 0.25%)</title><rect x="2.6684%" y="261" width="0.2541%" height="15" fill="rgb(209,103,24)" fg:x="21" fg:w="2"/><text x="2.9184%" y="271.50"></text></g><g><title>&lt;core::str::IsWhitespace as core::ops::function::FnMut&lt;(char,)&gt;&gt;::call_mut (2 samples, 0.25%)</title><rect x="2.6684%" y="245" width="0.2541%" height="15" fill="rgb(229,88,8)" fg:x="21" fg:w="2"/><text x="2.9184%" y="255.50"></text></g><g><title>&lt;core::str::IsWhitespace as core::ops::function::Fn&lt;(char,)&gt;&gt;::call (2 samples, 0.25%)</title><rect x="2.6684%" y="229" width="0.2541%" height="15" fill="rgb(213,181,19)" fg:x="21" fg:w="2"/><text x="2.9184%" y="239.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::is_whitespace (2 samples, 0.25%)</title><rect x="2.6684%" y="213" width="0.2541%" height="15" fill="rgb(254,191,54)" fg:x="21" fg:w="2"/><text x="2.9184%" y="223.50"></text></g><g><title>&lt;core::str::iter::SplitWhitespace as core::iter::traits::iterator::Iterator&gt;::next (16 samples, 2.03%)</title><rect x="2.2872%" y="405" width="2.0330%" height="15" fill="rgb(241,83,37)" fg:x="18" fg:w="16"/><text x="2.5372%" y="415.50">&lt;..</text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (16 samples, 2.03%)</title><rect x="2.2872%" y="389" width="2.0330%" height="15" fill="rgb(233,36,39)" fg:x="18" fg:w="16"/><text x="2.5372%" y="399.50">&lt;..</text></g><g><title>core::iter::traits::iterator::Iterator::find (16 samples, 2.03%)</title><rect x="2.2872%" y="373" width="2.0330%" height="15" fill="rgb(226,3,54)" fg:x="18" fg:w="16"/><text x="2.5372%" y="383.50">c..</text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (16 samples, 2.03%)</title><rect x="2.2872%" y="357" width="2.0330%" height="15" fill="rgb(245,192,40)" fg:x="18" fg:w="16"/><text x="2.5372%" y="367.50">c..</text></g><g><title>&lt;core::str::iter::Split&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 samples, 1.91%)</title><rect x="2.4142%" y="341" width="1.9060%" height="15" fill="rgb(238,167,29)" fg:x="19" fg:w="15"/><text x="2.6642%" y="351.50">&lt;..</text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next (15 samples, 1.91%)</title><rect x="2.4142%" y="325" width="1.9060%" height="15" fill="rgb(232,182,51)" fg:x="19" fg:w="15"/><text x="2.6642%" y="335.50">c..</text></g><g><title>&lt;core::str::pattern::CharPredicateSearcher&lt;F&gt; as core::str::pattern::Searcher&gt;::next_match (15 samples, 1.91%)</title><rect x="2.4142%" y="309" width="1.9060%" height="15" fill="rgb(231,60,39)" fg:x="19" fg:w="15"/><text x="2.6642%" y="319.50">&lt;..</text></g><g><title>core::str::pattern::Searcher::next_match (15 samples, 1.91%)</title><rect x="2.4142%" y="293" width="1.9060%" height="15" fill="rgb(208,69,12)" fg:x="19" fg:w="15"/><text x="2.6642%" y="303.50">c..</text></g><g><title>&lt;core::str::pattern::MultiCharEqSearcher&lt;C&gt; as core::str::pattern::Searcher&gt;::next (15 samples, 1.91%)</title><rect x="2.4142%" y="277" width="1.9060%" height="15" fill="rgb(235,93,37)" fg:x="19" fg:w="15"/><text x="2.6642%" y="287.50">&lt;..</text></g><g><title>&lt;core::str::iter::CharIndices as core::iter::traits::iterator::Iterator&gt;::next (11 samples, 1.40%)</title><rect x="2.9225%" y="261" width="1.3977%" height="15" fill="rgb(213,116,39)" fg:x="23" fg:w="11"/><text x="3.1725%" y="271.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.89%)</title><rect x="3.4307%" y="245" width="0.8895%" height="15" fill="rgb(222,207,29)" fg:x="27" fg:w="7"/><text x="3.6807%" y="255.50"></text></g><g><title>core::str::validations::next_code_point (7 samples, 0.89%)</title><rect x="3.4307%" y="229" width="0.8895%" height="15" fill="rgb(206,96,30)" fg:x="27" fg:w="7"/><text x="3.6807%" y="239.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.13%)</title><rect x="4.1931%" y="213" width="0.1271%" height="15" fill="rgb(218,138,4)" fg:x="33" fg:w="1"/><text x="4.4431%" y="223.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (1 samples, 0.13%)</title><rect x="4.1931%" y="197" width="0.1271%" height="15" fill="rgb(250,191,14)" fg:x="33" fg:w="1"/><text x="4.4431%" y="207.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_first (2 samples, 0.25%)</title><rect x="4.8285%" y="293" width="0.2541%" height="15" fill="rgb(239,60,40)" fg:x="38" fg:w="2"/><text x="5.0785%" y="303.50"></text></g><g><title>rust_decimal::str::byte_dispatch_u64 (1 samples, 0.13%)</title><rect x="5.0826%" y="293" width="0.1271%" height="15" fill="rgb(206,27,48)" fg:x="40" fg:w="1"/><text x="5.3326%" y="303.50"></text></g><g><title>rust_decimal::str::handle_digit_64 (12 samples, 1.52%)</title><rect x="4.4473%" y="309" width="1.5248%" height="15" fill="rgb(225,35,8)" fg:x="35" fg:w="12"/><text x="4.6973%" y="319.50"></text></g><g><title>rust_decimal::str::handle_data (6 samples, 0.76%)</title><rect x="5.2097%" y="293" width="0.7624%" height="15" fill="rgb(250,213,24)" fg:x="41" fg:w="6"/><text x="5.4597%" y="303.50"></text></g><g><title>rust_decimal::decimal::Decimal::from_parts (6 samples, 0.76%)</title><rect x="5.2097%" y="277" width="0.7624%" height="15" fill="rgb(247,123,22)" fg:x="41" fg:w="6"/><text x="5.4597%" y="287.50"></text></g><g><title>&lt;rust_decimal::decimal::Decimal as core::str::traits::FromStr&gt;::from_str (14 samples, 1.78%)</title><rect x="4.3202%" y="357" width="1.7789%" height="15" fill="rgb(231,138,38)" fg:x="34" fg:w="14"/><text x="4.5702%" y="367.50">&lt;..</text></g><g><title>rust_decimal::str::handle_digit_64 (13 samples, 1.65%)</title><rect x="4.4473%" y="341" width="1.6518%" height="15" fill="rgb(231,145,46)" fg:x="35" fg:w="13"/><text x="4.6973%" y="351.50"></text></g><g><title>rust_decimal::str::byte_dispatch_u64 (13 samples, 1.65%)</title><rect x="4.4473%" y="325" width="1.6518%" height="15" fill="rgb(251,118,11)" fg:x="35" fg:w="13"/><text x="4.6973%" y="335.50"></text></g><g><title>rust_decimal::str::handle_point (1 samples, 0.13%)</title><rect x="5.9720%" y="309" width="0.1271%" height="15" fill="rgb(217,147,25)" fg:x="47" fg:w="1"/><text x="6.2220%" y="319.50"></text></g><g><title>rust_decimal::str::dispatch_next (1 samples, 0.13%)</title><rect x="5.9720%" y="293" width="0.1271%" height="15" fill="rgb(247,81,37)" fg:x="47" fg:w="1"/><text x="6.2220%" y="303.50"></text></g><g><title>rust_decimal::str::byte_dispatch_u64 (1 samples, 0.13%)</title><rect x="5.9720%" y="277" width="0.1271%" height="15" fill="rgb(209,12,38)" fg:x="47" fg:w="1"/><text x="6.2220%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (35 samples, 4.45%)</title><rect x="2.1601%" y="421" width="4.4473%" height="15" fill="rgb(227,1,9)" fg:x="17" fg:w="35"/><text x="2.4101%" y="431.50">&lt;core..</text></g><g><title>core::option::Option&lt;T&gt;::map (18 samples, 2.29%)</title><rect x="4.3202%" y="405" width="2.2872%" height="15" fill="rgb(248,47,43)" fg:x="34" fg:w="18"/><text x="4.5702%" y="415.50">c..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (18 samples, 2.29%)</title><rect x="4.3202%" y="389" width="2.2872%" height="15" fill="rgb(221,10,30)" fg:x="34" fg:w="18"/><text x="4.5702%" y="399.50">c..</text></g><g><title>stddev::main::{{closure}} (18 samples, 2.29%)</title><rect x="4.3202%" y="373" width="2.2872%" height="15" fill="rgb(210,229,1)" fg:x="34" fg:w="18"/><text x="4.5702%" y="383.50">s..</text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap (4 samples, 0.51%)</title><rect x="6.0991%" y="357" width="0.5083%" height="15" fill="rgb(222,148,37)" fg:x="48" fg:w="4"/><text x="6.3491%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (38 samples, 4.83%)</title><rect x="2.0330%" y="517" width="4.8285%" height="15" fill="rgb(234,67,33)" fg:x="16" fg:w="38"/><text x="2.2830%" y="527.50">core::..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (38 samples, 4.83%)</title><rect x="2.0330%" y="501" width="4.8285%" height="15" fill="rgb(247,98,35)" fg:x="16" fg:w="38"/><text x="2.2830%" y="511.50">&lt;alloc..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (38 samples, 4.83%)</title><rect x="2.0330%" y="485" width="4.8285%" height="15" fill="rgb(247,138,52)" fg:x="16" fg:w="38"/><text x="2.2830%" y="495.50">&lt;alloc..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (38 samples, 4.83%)</title><rect x="2.0330%" y="469" width="4.8285%" height="15" fill="rgb(213,79,30)" fg:x="16" fg:w="38"/><text x="2.2830%" y="479.50">&lt;alloc..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (38 samples, 4.83%)</title><rect x="2.0330%" y="453" width="4.8285%" height="15" fill="rgb(246,177,23)" fg:x="16" fg:w="38"/><text x="2.2830%" y="463.50">&lt;alloc..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (38 samples, 4.83%)</title><rect x="2.0330%" y="437" width="4.8285%" height="15" fill="rgb(230,62,27)" fg:x="16" fg:w="38"/><text x="2.2830%" y="447.50">alloc:..</text></g><g><title>core::ptr::write (2 samples, 0.25%)</title><rect x="6.6074%" y="421" width="0.2541%" height="15" fill="rgb(216,154,8)" fg:x="52" fg:w="2"/><text x="6.8574%" y="431.50"></text></g><g><title>[unknown] (1 samples, 0.13%)</title><rect x="6.7344%" y="405" width="0.1271%" height="15" fill="rgb(244,35,45)" fg:x="53" fg:w="1"/><text x="6.9844%" y="415.50"></text></g><g><title>[unknown] (1 samples, 0.13%)</title><rect x="6.7344%" y="389" width="0.1271%" height="15" fill="rgb(251,115,12)" fg:x="53" fg:w="1"/><text x="6.9844%" y="399.50"></text></g><g><title>[unknown] (1 samples, 0.13%)</title><rect x="6.7344%" y="373" width="0.1271%" height="15" fill="rgb(240,54,50)" fg:x="53" fg:w="1"/><text x="6.9844%" y="383.50"></text></g><g><title>[unknown] (1 samples, 0.13%)</title><rect x="6.7344%" y="357" width="0.1271%" height="15" fill="rgb(233,84,52)" fg:x="53" fg:w="1"/><text x="6.9844%" y="367.50"></text></g><g><title>[unknown] (1 samples, 0.13%)</title><rect x="6.7344%" y="341" width="0.1271%" height="15" fill="rgb(207,117,47)" fg:x="53" fg:w="1"/><text x="6.9844%" y="351.50"></text></g><g><title>[unknown] (1 samples, 0.13%)</title><rect x="6.7344%" y="325" width="0.1271%" height="15" fill="rgb(249,43,39)" fg:x="53" fg:w="1"/><text x="6.9844%" y="335.50"></text></g><g><title>[unknown] (1 samples, 0.13%)</title><rect x="6.7344%" y="309" width="0.1271%" height="15" fill="rgb(209,38,44)" fg:x="53" fg:w="1"/><text x="6.9844%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (12 samples, 1.52%)</title><rect x="6.8615%" y="341" width="1.5248%" height="15" fill="rgb(236,212,23)" fg:x="54" fg:w="12"/><text x="7.1115%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted::{{closure}} (12 samples, 1.52%)</title><rect x="6.8615%" y="325" width="1.5248%" height="15" fill="rgb(242,79,21)" fg:x="54" fg:w="12"/><text x="7.1115%" y="335.50"></text></g><g><title>core::ptr::write (12 samples, 1.52%)</title><rect x="6.8615%" y="309" width="1.5248%" height="15" fill="rgb(211,96,35)" fg:x="54" fg:w="12"/><text x="7.1115%" y="319.50"></text></g><g><title>[unknown] (8 samples, 1.02%)</title><rect x="7.3698%" y="293" width="1.0165%" height="15" fill="rgb(253,215,40)" fg:x="58" fg:w="8"/><text x="7.6198%" y="303.50"></text></g><g><title>[unknown] (6 samples, 0.76%)</title><rect x="7.6239%" y="277" width="0.7624%" height="15" fill="rgb(211,81,21)" fg:x="60" fg:w="6"/><text x="7.8739%" y="287.50"></text></g><g><title>[unknown] (6 samples, 0.76%)</title><rect x="7.6239%" y="261" width="0.7624%" height="15" fill="rgb(208,190,38)" fg:x="60" fg:w="6"/><text x="7.8739%" y="271.50"></text></g><g><title>[unknown] (5 samples, 0.64%)</title><rect x="7.7510%" y="245" width="0.6353%" height="15" fill="rgb(235,213,38)" fg:x="61" fg:w="5"/><text x="8.0010%" y="255.50"></text></g><g><title>[unknown] (5 samples, 0.64%)</title><rect x="7.7510%" y="229" width="0.6353%" height="15" fill="rgb(237,122,38)" fg:x="61" fg:w="5"/><text x="8.0010%" y="239.50"></text></g><g><title>[unknown] (5 samples, 0.64%)</title><rect x="7.7510%" y="213" width="0.6353%" height="15" fill="rgb(244,218,35)" fg:x="61" fg:w="5"/><text x="8.0010%" y="223.50"></text></g><g><title>[unknown] (4 samples, 0.51%)</title><rect x="7.8780%" y="197" width="0.5083%" height="15" fill="rgb(240,68,47)" fg:x="62" fg:w="4"/><text x="8.1280%" y="207.50"></text></g><g><title>[unknown] (4 samples, 0.51%)</title><rect x="7.8780%" y="181" width="0.5083%" height="15" fill="rgb(210,16,53)" fg:x="62" fg:w="4"/><text x="8.1280%" y="191.50"></text></g><g><title>[unknown] (4 samples, 0.51%)</title><rect x="7.8780%" y="165" width="0.5083%" height="15" fill="rgb(235,124,12)" fg:x="62" fg:w="4"/><text x="8.1280%" y="175.50"></text></g><g><title>[unknown] (4 samples, 0.51%)</title><rect x="7.8780%" y="149" width="0.5083%" height="15" fill="rgb(224,169,11)" fg:x="62" fg:w="4"/><text x="8.1280%" y="159.50"></text></g><g><title>[unknown] (2 samples, 0.25%)</title><rect x="8.1321%" y="133" width="0.2541%" height="15" fill="rgb(250,166,2)" fg:x="64" fg:w="2"/><text x="8.3821%" y="143.50"></text></g><g><title>&lt;mathlib::MathExpr as core::clone::Clone&gt;::clone (7 samples, 0.89%)</title><rect x="8.8945%" y="293" width="0.8895%" height="15" fill="rgb(242,216,29)" fg:x="70" fg:w="7"/><text x="9.1445%" y="303.50"></text></g><g><title>&lt;rust_decimal::decimal::Decimal as core::clone::Clone&gt;::clone (3 samples, 0.38%)</title><rect x="9.4028%" y="277" width="0.3812%" height="15" fill="rgb(230,116,27)" fg:x="74" fg:w="3"/><text x="9.6528%" y="287.50"></text></g><g><title>&lt;T as alloc::alloc::WriteCloneIntoRaw&gt;::write_clone_into_raw (37 samples, 4.70%)</title><rect x="8.6404%" y="309" width="4.7014%" height="15" fill="rgb(228,99,48)" fg:x="68" fg:w="37"/><text x="8.8904%" y="319.50">&lt;T as..</text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (28 samples, 3.56%)</title><rect x="9.7840%" y="293" width="3.5578%" height="15" fill="rgb(253,11,6)" fg:x="77" fg:w="28"/><text x="10.0340%" y="303.50">core..</text></g><g><title>core::ptr::write (28 samples, 3.56%)</title><rect x="9.7840%" y="277" width="3.5578%" height="15" fill="rgb(247,143,39)" fg:x="77" fg:w="28"/><text x="10.0340%" y="287.50">core..</text></g><g><title>[unknown] (14 samples, 1.78%)</title><rect x="18.6785%" y="197" width="1.7789%" height="15" fill="rgb(236,97,10)" fg:x="147" fg:w="14"/><text x="18.9285%" y="207.50">[..</text></g><g><title>[unknown] (8 samples, 1.02%)</title><rect x="19.4409%" y="181" width="1.0165%" height="15" fill="rgb(233,208,19)" fg:x="153" fg:w="8"/><text x="19.6909%" y="191.50"></text></g><g><title>[unknown] (7 samples, 0.89%)</title><rect x="19.5680%" y="165" width="0.8895%" height="15" fill="rgb(216,164,2)" fg:x="154" fg:w="7"/><text x="19.8180%" y="175.50"></text></g><g><title>[unknown] (7 samples, 0.89%)</title><rect x="19.5680%" y="149" width="0.8895%" height="15" fill="rgb(220,129,5)" fg:x="154" fg:w="7"/><text x="19.8180%" y="159.50"></text></g><g><title>[unknown] (7 samples, 0.89%)</title><rect x="19.5680%" y="133" width="0.8895%" height="15" fill="rgb(242,17,10)" fg:x="154" fg:w="7"/><text x="19.8180%" y="143.50"></text></g><g><title>[unknown] (6 samples, 0.76%)</title><rect x="19.6950%" y="117" width="0.7624%" height="15" fill="rgb(242,107,0)" fg:x="155" fg:w="6"/><text x="19.9450%" y="127.50"></text></g><g><title>[unknown] (6 samples, 0.76%)</title><rect x="19.6950%" y="101" width="0.7624%" height="15" fill="rgb(251,28,31)" fg:x="155" fg:w="6"/><text x="19.9450%" y="111.50"></text></g><g><title>[unknown] (5 samples, 0.64%)</title><rect x="19.8221%" y="85" width="0.6353%" height="15" fill="rgb(233,223,10)" fg:x="156" fg:w="5"/><text x="20.0721%" y="95.50"></text></g><g><title>[unknown] (5 samples, 0.64%)</title><rect x="19.8221%" y="69" width="0.6353%" height="15" fill="rgb(215,21,27)" fg:x="156" fg:w="5"/><text x="20.0721%" y="79.50"></text></g><g><title>[unknown] (5 samples, 0.64%)</title><rect x="19.8221%" y="53" width="0.6353%" height="15" fill="rgb(232,23,21)" fg:x="156" fg:w="5"/><text x="20.0721%" y="63.50"></text></g><g><title>[unknown] (2 samples, 0.25%)</title><rect x="20.2033%" y="37" width="0.2541%" height="15" fill="rgb(244,5,23)" fg:x="159" fg:w="2"/><text x="20.4533%" y="47.50"></text></g><g><title>__GI___libc_malloc (56 samples, 7.12%)</title><rect x="13.5959%" y="229" width="7.1156%" height="15" fill="rgb(226,81,46)" fg:x="107" fg:w="56"/><text x="13.8459%" y="239.50">__GI___lib..</text></g><g><title>_int_malloc (47 samples, 5.97%)</title><rect x="14.7395%" y="213" width="5.9720%" height="15" fill="rgb(247,70,30)" fg:x="116" fg:w="47"/><text x="14.9895%" y="223.50">_int_mal..</text></g><g><title>sysmalloc (2 samples, 0.25%)</title><rect x="20.4574%" y="197" width="0.2541%" height="15" fill="rgb(212,68,19)" fg:x="161" fg:w="2"/><text x="20.7074%" y="207.50"></text></g><g><title>__glibc_morecore (2 samples, 0.25%)</title><rect x="20.4574%" y="181" width="0.2541%" height="15" fill="rgb(240,187,13)" fg:x="161" fg:w="2"/><text x="20.7074%" y="191.50"></text></g><g><title>__GI___sbrk (2 samples, 0.25%)</title><rect x="20.4574%" y="165" width="0.2541%" height="15" fill="rgb(223,113,26)" fg:x="161" fg:w="2"/><text x="20.7074%" y="175.50"></text></g><g><title>__brk (2 samples, 0.25%)</title><rect x="20.4574%" y="149" width="0.2541%" height="15" fill="rgb(206,192,2)" fg:x="161" fg:w="2"/><text x="20.7074%" y="159.50"></text></g><g><title>[unknown] (2 samples, 0.25%)</title><rect x="20.4574%" y="133" width="0.2541%" height="15" fill="rgb(241,108,4)" fg:x="161" fg:w="2"/><text x="20.7074%" y="143.50"></text></g><g><title>[unknown] (2 samples, 0.25%)</title><rect x="20.4574%" y="117" width="0.2541%" height="15" fill="rgb(247,173,49)" fg:x="161" fg:w="2"/><text x="20.7074%" y="127.50"></text></g><g><title>[unknown] (2 samples, 0.25%)</title><rect x="20.4574%" y="101" width="0.2541%" height="15" fill="rgb(224,114,35)" fg:x="161" fg:w="2"/><text x="20.7074%" y="111.50"></text></g><g><title>[unknown] (2 samples, 0.25%)</title><rect x="20.4574%" y="85" width="0.2541%" height="15" fill="rgb(245,159,27)" fg:x="161" fg:w="2"/><text x="20.7074%" y="95.50"></text></g><g><title>[unknown] (2 samples, 0.25%)</title><rect x="20.4574%" y="69" width="0.2541%" height="15" fill="rgb(245,172,44)" fg:x="161" fg:w="2"/><text x="20.7074%" y="79.50"></text></g><g><title>[unknown] (2 samples, 0.25%)</title><rect x="20.4574%" y="53" width="0.2541%" height="15" fill="rgb(236,23,11)" fg:x="161" fg:w="2"/><text x="20.7074%" y="63.50"></text></g><g><title>[unknown] (1 samples, 0.13%)</title><rect x="20.5845%" y="37" width="0.1271%" height="15" fill="rgb(205,117,38)" fg:x="162" fg:w="1"/><text x="20.8345%" y="47.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::clone::Clone&gt;::clone (97 samples, 12.33%)</title><rect x="8.6404%" y="325" width="12.3253%" height="15" fill="rgb(237,72,25)" fg:x="68" fg:w="97"/><text x="8.8904%" y="335.50">&lt;alloc::boxed::Box..</text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::new_uninit_in (60 samples, 7.62%)</title><rect x="13.3418%" y="309" width="7.6239%" height="15" fill="rgb(244,70,9)" fg:x="105" fg:w="60"/><text x="13.5918%" y="319.50">alloc::box..</text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::try_new_uninit_in (58 samples, 7.37%)</title><rect x="13.5959%" y="293" width="7.3698%" height="15" fill="rgb(217,125,39)" fg:x="107" fg:w="58"/><text x="13.8459%" y="303.50">alloc::box..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (58 samples, 7.37%)</title><rect x="13.5959%" y="277" width="7.3698%" height="15" fill="rgb(235,36,10)" fg:x="107" fg:w="58"/><text x="13.8459%" y="287.50">&lt;alloc::al..</text></g><g><title>alloc::alloc::Global::alloc_impl (58 samples, 7.37%)</title><rect x="13.5959%" y="261" width="7.3698%" height="15" fill="rgb(251,123,47)" fg:x="107" fg:w="58"/><text x="13.8459%" y="271.50">alloc::all..</text></g><g><title>alloc::alloc::alloc (58 samples, 7.37%)</title><rect x="13.5959%" y="245" width="7.3698%" height="15" fill="rgb(221,13,13)" fg:x="107" fg:w="58"/><text x="13.8459%" y="255.50">alloc::all..</text></g><g><title>__rdl_alloc (2 samples, 0.25%)</title><rect x="20.7116%" y="229" width="0.2541%" height="15" fill="rgb(238,131,9)" fg:x="163" fg:w="2"/><text x="20.9616%" y="239.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.13%)</title><rect x="20.8386%" y="213" width="0.1271%" height="15" fill="rgb(211,50,8)" fg:x="164" fg:w="1"/><text x="21.0886%" y="223.50"></text></g><g><title>__GI___libc_malloc (69 samples, 8.77%)</title><rect x="21.6010%" y="245" width="8.7675%" height="15" fill="rgb(245,182,24)" fg:x="170" fg:w="69"/><text x="21.8510%" y="255.50">__GI___libc_..</text></g><g><title>_int_malloc (61 samples, 7.75%)</title><rect x="22.6175%" y="229" width="7.7510%" height="15" fill="rgb(242,14,37)" fg:x="178" fg:w="61"/><text x="22.8675%" y="239.50">_int_malloc</text></g><g><title>[unknown] (31 samples, 3.94%)</title><rect x="26.4295%" y="213" width="3.9390%" height="15" fill="rgb(246,228,12)" fg:x="208" fg:w="31"/><text x="26.6795%" y="223.50">[unk..</text></g><g><title>[unknown] (23 samples, 2.92%)</title><rect x="27.4460%" y="197" width="2.9225%" height="15" fill="rgb(213,55,15)" fg:x="216" fg:w="23"/><text x="27.6960%" y="207.50">[u..</text></g><g><title>[unknown] (20 samples, 2.54%)</title><rect x="27.8272%" y="181" width="2.5413%" height="15" fill="rgb(209,9,3)" fg:x="219" fg:w="20"/><text x="28.0772%" y="191.50">[u..</text></g><g><title>[unknown] (19 samples, 2.41%)</title><rect x="27.9543%" y="165" width="2.4142%" height="15" fill="rgb(230,59,30)" fg:x="220" fg:w="19"/><text x="28.2043%" y="175.50">[u..</text></g><g><title>[unknown] (18 samples, 2.29%)</title><rect x="28.0813%" y="149" width="2.2872%" height="15" fill="rgb(209,121,21)" fg:x="221" fg:w="18"/><text x="28.3313%" y="159.50">[..</text></g><g><title>[unknown] (16 samples, 2.03%)</title><rect x="28.3355%" y="133" width="2.0330%" height="15" fill="rgb(220,109,13)" fg:x="223" fg:w="16"/><text x="28.5855%" y="143.50">[..</text></g><g><title>[unknown] (15 samples, 1.91%)</title><rect x="28.4625%" y="117" width="1.9060%" height="15" fill="rgb(232,18,1)" fg:x="224" fg:w="15"/><text x="28.7125%" y="127.50">[..</text></g><g><title>[unknown] (14 samples, 1.78%)</title><rect x="28.5896%" y="101" width="1.7789%" height="15" fill="rgb(215,41,42)" fg:x="225" fg:w="14"/><text x="28.8396%" y="111.50">[..</text></g><g><title>[unknown] (14 samples, 1.78%)</title><rect x="28.5896%" y="85" width="1.7789%" height="15" fill="rgb(224,123,36)" fg:x="225" fg:w="14"/><text x="28.8396%" y="95.50">[..</text></g><g><title>[unknown] (13 samples, 1.65%)</title><rect x="28.7166%" y="69" width="1.6518%" height="15" fill="rgb(240,125,3)" fg:x="226" fg:w="13"/><text x="28.9666%" y="79.50"></text></g><g><title>[unknown] (12 samples, 1.52%)</title><rect x="28.8437%" y="53" width="1.5248%" height="15" fill="rgb(205,98,50)" fg:x="227" fg:w="12"/><text x="29.0937%" y="63.50"></text></g><g><title>__rdl_alloc (4 samples, 0.51%)</title><rect x="30.3685%" y="245" width="0.5083%" height="15" fill="rgb(205,185,37)" fg:x="239" fg:w="4"/><text x="30.6185%" y="255.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.13%)</title><rect x="30.7497%" y="229" width="0.1271%" height="15" fill="rgb(238,207,15)" fg:x="242" fg:w="1"/><text x="30.9997%" y="239.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (190 samples, 24.14%)</title><rect x="6.8615%" y="501" width="24.1423%" height="15" fill="rgb(213,199,42)" fg:x="54" fg:w="190"/><text x="7.1115%" y="511.50">core::iter::traits::iterator::Iterator..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (190 samples, 24.14%)</title><rect x="6.8615%" y="485" width="24.1423%" height="15" fill="rgb(235,201,11)" fg:x="54" fg:w="190"/><text x="7.1115%" y="495.50">&lt;alloc::vec::Vec&lt;T&gt; as core::iter::tra..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (190 samples, 24.14%)</title><rect x="6.8615%" y="469" width="24.1423%" height="15" fill="rgb(207,46,11)" fg:x="54" fg:w="190"/><text x="7.1115%" y="479.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spe..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (190 samples, 24.14%)</title><rect x="6.8615%" y="453" width="24.1423%" height="15" fill="rgb(241,35,35)" fg:x="54" fg:w="190"/><text x="7.1115%" y="463.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spe..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (190 samples, 24.14%)</title><rect x="6.8615%" y="437" width="24.1423%" height="15" fill="rgb(243,32,47)" fg:x="54" fg:w="190"/><text x="7.1115%" y="447.50">&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::s..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (190 samples, 24.14%)</title><rect x="6.8615%" y="421" width="24.1423%" height="15" fill="rgb(247,202,23)" fg:x="54" fg:w="190"/><text x="7.1115%" y="431.50">alloc::vec::Vec&lt;T,A&gt;::extend_trusted</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (190 samples, 24.14%)</title><rect x="6.8615%" y="405" width="24.1423%" height="15" fill="rgb(219,102,11)" fg:x="54" fg:w="190"/><text x="7.1115%" y="415.50">core::iter::traits::iterator::Iterator..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (190 samples, 24.14%)</title><rect x="6.8615%" y="389" width="24.1423%" height="15" fill="rgb(243,110,44)" fg:x="54" fg:w="190"/><text x="7.1115%" y="399.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; a..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (190 samples, 24.14%)</title><rect x="6.8615%" y="373" width="24.1423%" height="15" fill="rgb(222,74,54)" fg:x="54" fg:w="190"/><text x="7.1115%" y="383.50">core::iter::traits::iterator::Iterator..</text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (190 samples, 24.14%)</title><rect x="6.8615%" y="357" width="24.1423%" height="15" fill="rgb(216,99,12)" fg:x="54" fg:w="190"/><text x="7.1115%" y="367.50">core::iter::adapters::map::map_fold::{..</text></g><g><title>stddev::stddev::{{closure}} (178 samples, 22.62%)</title><rect x="8.3863%" y="341" width="22.6175%" height="15" fill="rgb(226,22,26)" fg:x="66" fg:w="178"/><text x="8.6363%" y="351.50">stddev::stddev::{{closure}}</text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (79 samples, 10.04%)</title><rect x="20.9657%" y="325" width="10.0381%" height="15" fill="rgb(217,163,10)" fg:x="165" fg:w="79"/><text x="21.2157%" y="335.50">alloc::boxed::B..</text></g><g><title>alloc::alloc::exchange_malloc (75 samples, 9.53%)</title><rect x="21.4740%" y="309" width="9.5299%" height="15" fill="rgb(213,25,53)" fg:x="169" fg:w="75"/><text x="21.7240%" y="319.50">alloc::alloc::..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (74 samples, 9.40%)</title><rect x="21.6010%" y="293" width="9.4028%" height="15" fill="rgb(252,105,26)" fg:x="170" fg:w="74"/><text x="21.8510%" y="303.50">&lt;alloc::alloc..</text></g><g><title>alloc::alloc::Global::alloc_impl (74 samples, 9.40%)</title><rect x="21.6010%" y="277" width="9.4028%" height="15" fill="rgb(220,39,43)" fg:x="170" fg:w="74"/><text x="21.8510%" y="287.50">alloc::alloc:..</text></g><g><title>alloc::alloc::alloc (74 samples, 9.40%)</title><rect x="21.6010%" y="261" width="9.4028%" height="15" fill="rgb(229,68,48)" fg:x="170" fg:w="74"/><text x="21.8510%" y="271.50">alloc::alloc:..</text></g><g><title>__rust_alloc (1 samples, 0.13%)</title><rect x="30.8767%" y="245" width="0.1271%" height="15" fill="rgb(252,8,32)" fg:x="243" fg:w="1"/><text x="31.1267%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;mathlib::MathExpr&gt;&gt; (2 samples, 0.25%)</title><rect x="31.0038%" y="501" width="0.2541%" height="15" fill="rgb(223,20,43)" fg:x="244" fg:w="2"/><text x="31.2538%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;mathlib::MathExpr&gt; (2 samples, 0.25%)</title><rect x="31.0038%" y="485" width="0.2541%" height="15" fill="rgb(229,81,49)" fg:x="244" fg:w="2"/><text x="31.2538%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;mathlib::MathExpr&gt;&gt; (2 samples, 0.25%)</title><rect x="31.0038%" y="469" width="0.2541%" height="15" fill="rgb(236,28,36)" fg:x="244" fg:w="2"/><text x="31.2538%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;mathlib::MathExpr&gt; (2 samples, 0.25%)</title><rect x="31.0038%" y="453" width="0.2541%" height="15" fill="rgb(249,185,26)" fg:x="244" fg:w="2"/><text x="31.2538%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;mathlib::MathExpr&gt;&gt; (2 samples, 0.25%)</title><rect x="31.0038%" y="437" width="0.2541%" height="15" fill="rgb(249,174,33)" fg:x="244" fg:w="2"/><text x="31.2538%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.25%)</title><rect x="31.0038%" y="421" width="0.2541%" height="15" fill="rgb(233,201,37)" fg:x="244" fg:w="2"/><text x="31.2538%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;[mathlib::MathExpr]&gt; (2 samples, 0.25%)</title><rect x="31.0038%" y="405" width="0.2541%" height="15" fill="rgb(221,78,26)" fg:x="244" fg:w="2"/><text x="31.2538%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;mathlib::MathExpr&gt; (2 samples, 0.25%)</title><rect x="31.0038%" y="389" width="0.2541%" height="15" fill="rgb(250,127,30)" fg:x="244" fg:w="2"/><text x="31.2538%" y="399.50"></text></g><g><title>__free (70 samples, 8.89%)</title><rect x="31.2579%" y="437" width="8.8945%" height="15" fill="rgb(230,49,44)" fg:x="246" fg:w="70"/><text x="31.5079%" y="447.50">__free</text></g><g><title>_int_free (70 samples, 8.89%)</title><rect x="31.2579%" y="421" width="8.8945%" height="15" fill="rgb(229,67,23)" fg:x="246" fg:w="70"/><text x="31.5079%" y="431.50">_int_free</text></g><g><title>malloc_consolidate (70 samples, 8.89%)</title><rect x="31.2579%" y="405" width="8.8945%" height="15" fill="rgb(249,83,47)" fg:x="246" fg:w="70"/><text x="31.5079%" y="415.50">malloc_consol..</text></g><g><title>unlink_chunk.isra.0 (34 samples, 4.32%)</title><rect x="35.8323%" y="389" width="4.3202%" height="15" fill="rgb(215,43,3)" fg:x="282" fg:w="34"/><text x="36.0823%" y="399.50">unlin..</text></g><g><title>__free (6 samples, 0.76%)</title><rect x="40.1525%" y="373" width="0.7624%" height="15" fill="rgb(238,154,13)" fg:x="316" fg:w="6"/><text x="40.4025%" y="383.50"></text></g><g><title>_int_free (1 samples, 0.13%)</title><rect x="40.7878%" y="357" width="0.1271%" height="15" fill="rgb(219,56,2)" fg:x="321" fg:w="1"/><text x="41.0378%" y="367.50"></text></g><g><title>__free (10 samples, 1.27%)</title><rect x="41.0419%" y="341" width="1.2706%" height="15" fill="rgb(233,0,4)" fg:x="323" fg:w="10"/><text x="41.2919%" y="351.50"></text></g><g><title>_int_free (8 samples, 1.02%)</title><rect x="41.2961%" y="325" width="1.0165%" height="15" fill="rgb(235,30,7)" fg:x="325" fg:w="8"/><text x="41.5461%" y="335.50"></text></g><g><title>__free (7 samples, 0.89%)</title><rect x="42.3126%" y="293" width="0.8895%" height="15" fill="rgb(250,79,13)" fg:x="333" fg:w="7"/><text x="42.5626%" y="303.50"></text></g><g><title>_int_free (3 samples, 0.38%)</title><rect x="42.8208%" y="277" width="0.3812%" height="15" fill="rgb(211,146,34)" fg:x="337" fg:w="3"/><text x="43.0708%" y="287.50"></text></g><g><title>alloc::alloc::box_free (8 samples, 1.02%)</title><rect x="42.3126%" y="341" width="1.0165%" height="15" fill="rgb(228,22,38)" fg:x="333" fg:w="8"/><text x="42.5626%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (8 samples, 1.02%)</title><rect x="42.3126%" y="325" width="1.0165%" height="15" fill="rgb(235,168,5)" fg:x="333" fg:w="8"/><text x="42.5626%" y="335.50"></text></g><g><title>alloc::alloc::dealloc (8 samples, 1.02%)</title><rect x="42.3126%" y="309" width="1.0165%" height="15" fill="rgb(221,155,16)" fg:x="333" fg:w="8"/><text x="42.5626%" y="319.50"></text></g><g><title>__rdl_dealloc (1 samples, 0.13%)</title><rect x="43.2020%" y="293" width="0.1271%" height="15" fill="rgb(215,215,53)" fg:x="340" fg:w="1"/><text x="43.4520%" y="303.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (1 samples, 0.13%)</title><rect x="43.2020%" y="277" width="0.1271%" height="15" fill="rgb(223,4,10)" fg:x="340" fg:w="1"/><text x="43.4520%" y="287.50"></text></g><g><title>__free (6 samples, 0.76%)</title><rect x="44.0915%" y="309" width="0.7624%" height="15" fill="rgb(234,103,6)" fg:x="347" fg:w="6"/><text x="44.3415%" y="319.50"></text></g><g><title>_int_free (1 samples, 0.13%)</title><rect x="44.7268%" y="293" width="0.1271%" height="15" fill="rgb(227,97,0)" fg:x="352" fg:w="1"/><text x="44.9768%" y="303.50"></text></g><g><title>__free (14 samples, 1.78%)</title><rect x="44.8539%" y="261" width="1.7789%" height="15" fill="rgb(234,150,53)" fg:x="353" fg:w="14"/><text x="45.1039%" y="271.50">_..</text></g><g><title>_int_free (6 samples, 0.76%)</title><rect x="45.8704%" y="245" width="0.7624%" height="15" fill="rgb(228,201,54)" fg:x="361" fg:w="6"/><text x="46.1204%" y="255.50"></text></g><g><title>alloc::alloc::box_free (15 samples, 1.91%)</title><rect x="44.8539%" y="309" width="1.9060%" height="15" fill="rgb(222,22,37)" fg:x="353" fg:w="15"/><text x="45.1039%" y="319.50">a..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (15 samples, 1.91%)</title><rect x="44.8539%" y="293" width="1.9060%" height="15" fill="rgb(237,53,32)" fg:x="353" fg:w="15"/><text x="45.1039%" y="303.50">&lt;..</text></g><g><title>alloc::alloc::dealloc (15 samples, 1.91%)</title><rect x="44.8539%" y="277" width="1.9060%" height="15" fill="rgb(233,25,53)" fg:x="353" fg:w="15"/><text x="45.1039%" y="287.50">a..</text></g><g><title>__rust_dealloc (1 samples, 0.13%)</title><rect x="46.6328%" y="261" width="0.1271%" height="15" fill="rgb(210,40,34)" fg:x="367" fg:w="1"/><text x="46.8828%" y="271.50"></text></g><g><title>alloc::alloc::box_free (5 samples, 0.64%)</title><rect x="47.7764%" y="277" width="0.6353%" height="15" fill="rgb(241,220,44)" fg:x="376" fg:w="5"/><text x="48.0264%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (5 samples, 0.64%)</title><rect x="47.7764%" y="261" width="0.6353%" height="15" fill="rgb(235,28,35)" fg:x="376" fg:w="5"/><text x="48.0264%" y="271.50"></text></g><g><title>alloc::alloc::dealloc (5 samples, 0.64%)</title><rect x="47.7764%" y="245" width="0.6353%" height="15" fill="rgb(210,56,17)" fg:x="376" fg:w="5"/><text x="48.0264%" y="255.50"></text></g><g><title>__free (5 samples, 0.64%)</title><rect x="47.7764%" y="229" width="0.6353%" height="15" fill="rgb(224,130,29)" fg:x="376" fg:w="5"/><text x="48.0264%" y="239.50"></text></g><g><title>_int_free (3 samples, 0.38%)</title><rect x="48.0305%" y="213" width="0.3812%" height="15" fill="rgb(235,212,8)" fg:x="378" fg:w="3"/><text x="48.2805%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;mathlib::MathExpr&gt; (137 samples, 17.41%)</title><rect x="31.2579%" y="501" width="17.4079%" height="15" fill="rgb(223,33,50)" fg:x="246" fg:w="137"/><text x="31.5079%" y="511.50">core::ptr::drop_in_place&lt;ma..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;mathlib::MathExpr&gt;&gt; (137 samples, 17.41%)</title><rect x="31.2579%" y="485" width="17.4079%" height="15" fill="rgb(219,149,13)" fg:x="246" fg:w="137"/><text x="31.5079%" y="495.50">core::ptr::drop_in_place&lt;al..</text></g><g><title>core::ptr::drop_in_place&lt;mathlib::MathExpr&gt; (137 samples, 17.41%)</title><rect x="31.2579%" y="469" width="17.4079%" height="15" fill="rgb(250,156,29)" fg:x="246" fg:w="137"/><text x="31.5079%" y="479.50">core::ptr::drop_in_place&lt;ma..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;mathlib::MathExpr&gt;&gt; (137 samples, 17.41%)</title><rect x="31.2579%" y="453" width="17.4079%" height="15" fill="rgb(216,193,19)" fg:x="246" fg:w="137"/><text x="31.5079%" y="463.50">core::ptr::drop_in_place&lt;al..</text></g><g><title>core::ptr::drop_in_place&lt;mathlib::MathExpr&gt; (67 samples, 8.51%)</title><rect x="40.1525%" y="437" width="8.5133%" height="15" fill="rgb(216,135,14)" fg:x="316" fg:w="67"/><text x="40.4025%" y="447.50">core::ptr::d..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;mathlib::MathExpr&gt;&gt; (67 samples, 8.51%)</title><rect x="40.1525%" y="421" width="8.5133%" height="15" fill="rgb(241,47,5)" fg:x="316" fg:w="67"/><text x="40.4025%" y="431.50">core::ptr::d..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (67 samples, 8.51%)</title><rect x="40.1525%" y="405" width="8.5133%" height="15" fill="rgb(233,42,35)" fg:x="316" fg:w="67"/><text x="40.4025%" y="415.50">&lt;alloc::vec:..</text></g><g><title>core::ptr::drop_in_place&lt;[mathlib::MathExpr]&gt; (67 samples, 8.51%)</title><rect x="40.1525%" y="389" width="8.5133%" height="15" fill="rgb(231,13,6)" fg:x="316" fg:w="67"/><text x="40.4025%" y="399.50">core::ptr::d..</text></g><g><title>core::ptr::drop_in_place&lt;mathlib::MathExpr&gt; (61 samples, 7.75%)</title><rect x="40.9149%" y="373" width="7.7510%" height="15" fill="rgb(207,181,40)" fg:x="322" fg:w="61"/><text x="41.1649%" y="383.50">core::ptr::..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;mathlib::MathExpr&gt;&gt; (60 samples, 7.62%)</title><rect x="41.0419%" y="357" width="7.6239%" height="15" fill="rgb(254,173,49)" fg:x="323" fg:w="60"/><text x="41.2919%" y="367.50">core::ptr:..</text></g><g><title>core::ptr::drop_in_place&lt;mathlib::MathExpr&gt; (42 samples, 5.34%)</title><rect x="43.3291%" y="341" width="5.3367%" height="15" fill="rgb(221,1,38)" fg:x="341" fg:w="42"/><text x="43.5791%" y="351.50">core::p..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;mathlib::MathExpr&gt;&gt; (37 samples, 4.70%)</title><rect x="43.9644%" y="325" width="4.7014%" height="15" fill="rgb(206,124,46)" fg:x="346" fg:w="37"/><text x="44.2144%" y="335.50">core:..</text></g><g><title>core::ptr::drop_in_place&lt;mathlib::MathExpr&gt; (15 samples, 1.91%)</title><rect x="46.7598%" y="309" width="1.9060%" height="15" fill="rgb(249,21,11)" fg:x="368" fg:w="15"/><text x="47.0098%" y="319.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;mathlib::MathExpr&gt;&gt; (7 samples, 0.89%)</title><rect x="47.7764%" y="293" width="0.8895%" height="15" fill="rgb(222,201,40)" fg:x="376" fg:w="7"/><text x="48.0264%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;mathlib::MathExpr&gt; (2 samples, 0.25%)</title><rect x="48.4117%" y="277" width="0.2541%" height="15" fill="rgb(235,61,29)" fg:x="381" fg:w="2"/><text x="48.6617%" y="287.50"></text></g><g><title>rust_decimal::decimal::Decimal::is_zero (1 samples, 0.13%)</title><rect x="50.1906%" y="341" width="0.1271%" height="15" fill="rgb(219,207,3)" fg:x="395" fg:w="1"/><text x="50.4406%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::reduce (22 samples, 2.80%)</title><rect x="48.6658%" y="469" width="2.7954%" height="15" fill="rgb(222,56,46)" fg:x="383" fg:w="22"/><text x="48.9158%" y="479.50">co..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (22 samples, 2.80%)</title><rect x="48.6658%" y="453" width="2.7954%" height="15" fill="rgb(239,76,54)" fg:x="383" fg:w="22"/><text x="48.9158%" y="463.50">&lt;c..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (22 samples, 2.80%)</title><rect x="48.6658%" y="437" width="2.7954%" height="15" fill="rgb(231,124,27)" fg:x="383" fg:w="22"/><text x="48.9158%" y="447.50">co..</text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (17 samples, 2.16%)</title><rect x="49.3011%" y="421" width="2.1601%" height="15" fill="rgb(249,195,6)" fg:x="388" fg:w="17"/><text x="49.5511%" y="431.50">c..</text></g><g><title>mathlib::MathExpr::eval::{{closure}} (17 samples, 2.16%)</title><rect x="49.3011%" y="405" width="2.1601%" height="15" fill="rgb(237,174,47)" fg:x="388" fg:w="17"/><text x="49.5511%" y="415.50">m..</text></g><g><title>rust_decimal::arithmetic_impls::&lt;impl rust_decimal::decimal::Decimal&gt;::checked_add (17 samples, 2.16%)</title><rect x="49.3011%" y="389" width="2.1601%" height="15" fill="rgb(206,201,31)" fg:x="388" fg:w="17"/><text x="49.5511%" y="399.50">r..</text></g><g><title>rust_decimal::ops::add::add_impl (13 samples, 1.65%)</title><rect x="49.8094%" y="373" width="1.6518%" height="15" fill="rgb(231,57,52)" fg:x="392" fg:w="13"/><text x="50.0594%" y="383.50"></text></g><g><title>rust_decimal::ops::add::add_sub_internal (12 samples, 1.52%)</title><rect x="49.9365%" y="357" width="1.5248%" height="15" fill="rgb(248,177,22)" fg:x="393" fg:w="12"/><text x="50.1865%" y="367.50"></text></g><g><title>rust_decimal::ops::add::unaligned_add (9 samples, 1.14%)</title><rect x="50.3177%" y="341" width="1.1436%" height="15" fill="rgb(215,211,37)" fg:x="396" fg:w="9"/><text x="50.5677%" y="351.50"></text></g><g><title>rust_decimal::ops::add::aligned_add (5 samples, 0.64%)</title><rect x="50.8259%" y="325" width="0.6353%" height="15" fill="rgb(241,128,51)" fg:x="400" fg:w="5"/><text x="51.0759%" y="335.50"></text></g><g><title>rust_decimal::ops::common::Dec64::to_decimal (1 samples, 0.13%)</title><rect x="51.3342%" y="309" width="0.1271%" height="15" fill="rgb(227,165,31)" fg:x="404" fg:w="1"/><text x="51.5842%" y="319.50"></text></g><g><title>rust_decimal::decimal::Decimal::from_parts (1 samples, 0.13%)</title><rect x="51.3342%" y="293" width="0.1271%" height="15" fill="rgb(228,167,24)" fg:x="404" fg:w="1"/><text x="51.5842%" y="303.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.13%)</title><rect x="51.5883%" y="405" width="0.1271%" height="15" fill="rgb(228,143,12)" fg:x="406" fg:w="1"/><text x="51.8383%" y="415.50"></text></g><g><title>compiler_builtins::float::conv::int_to_float::u128_to_f64_bits (8 samples, 1.02%)</title><rect x="56.9250%" y="293" width="1.0165%" height="15" fill="rgb(249,149,8)" fg:x="448" fg:w="8"/><text x="57.1750%" y="303.50"></text></g><g><title>core::num::&lt;impl u128&gt;::leading_zeros (1 samples, 0.13%)</title><rect x="57.8145%" y="277" width="0.1271%" height="15" fill="rgb(243,35,44)" fg:x="455" fg:w="1"/><text x="58.0645%" y="287.50"></text></g><g><title>__floatuntidf (10 samples, 1.27%)</title><rect x="56.9250%" y="325" width="1.2706%" height="15" fill="rgb(246,89,9)" fg:x="448" fg:w="10"/><text x="57.1750%" y="335.50"></text></g><g><title>compiler_builtins::float::conv::__floatuntidf (10 samples, 1.27%)</title><rect x="56.9250%" y="309" width="1.2706%" height="15" fill="rgb(233,213,13)" fg:x="448" fg:w="10"/><text x="57.1750%" y="319.50"></text></g><g><title>core::f64::&lt;impl f64&gt;::from_bits (2 samples, 0.25%)</title><rect x="57.9416%" y="293" width="0.2541%" height="15" fill="rgb(233,141,41)" fg:x="456" fg:w="2"/><text x="58.1916%" y="303.50"></text></g><g><title>core::f64::&lt;impl f64&gt;::from_bits::rt_u64_to_f64 (2 samples, 0.25%)</title><rect x="57.9416%" y="277" width="0.2541%" height="15" fill="rgb(239,167,4)" fg:x="456" fg:w="2"/><text x="58.1916%" y="287.50"></text></g><g><title>__udivti3 (2 samples, 0.25%)</title><rect x="58.1957%" y="325" width="0.2541%" height="15" fill="rgb(209,217,16)" fg:x="458" fg:w="2"/><text x="58.4457%" y="335.50"></text></g><g><title>compiler_builtins::int::udiv::__udivti3 (1 samples, 0.13%)</title><rect x="58.3227%" y="309" width="0.1271%" height="15" fill="rgb(219,88,35)" fg:x="459" fg:w="1"/><text x="58.5727%" y="319.50"></text></g><g><title>compiler_builtins::int::specialized_div_rem::u128_div_rem (1 samples, 0.13%)</title><rect x="58.3227%" y="293" width="0.1271%" height="15" fill="rgb(220,193,23)" fg:x="459" fg:w="1"/><text x="58.5727%" y="303.50"></text></g><g><title>compiler_builtins::int::specialized_div_rem::u128_by_u64_div_rem (1 samples, 0.13%)</title><rect x="58.3227%" y="277" width="0.1271%" height="15" fill="rgb(230,90,52)" fg:x="459" fg:w="1"/><text x="58.5727%" y="287.50"></text></g><g><title>core::num::&lt;impl u128&gt;::pow (5 samples, 0.64%)</title><rect x="58.4498%" y="325" width="0.6353%" height="15" fill="rgb(252,106,19)" fg:x="460" fg:w="5"/><text x="58.6998%" y="335.50"></text></g><g><title>core::num::&lt;impl u128&gt;::leading_zeros (1 samples, 0.13%)</title><rect x="59.5934%" y="245" width="0.1271%" height="15" fill="rgb(206,74,20)" fg:x="469" fg:w="1"/><text x="59.8434%" y="255.50"></text></g><g><title>compiler_builtins::float::conv::int_to_float::u128_to_f64_bits (5 samples, 0.64%)</title><rect x="59.2122%" y="261" width="0.6353%" height="15" fill="rgb(230,138,44)" fg:x="466" fg:w="5"/><text x="59.4622%" y="271.50"></text></g><g><title>core::num::&lt;impl u128&gt;::wrapping_shl (1 samples, 0.13%)</title><rect x="59.7205%" y="245" width="0.1271%" height="15" fill="rgb(235,182,43)" fg:x="470" fg:w="1"/><text x="59.9705%" y="255.50"></text></g><g><title>core::num::&lt;impl u128&gt;::unchecked_shl (1 samples, 0.13%)</title><rect x="59.7205%" y="229" width="0.1271%" height="15" fill="rgb(242,16,51)" fg:x="470" fg:w="1"/><text x="59.9705%" y="239.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (7 samples, 0.89%)</title><rect x="59.0851%" y="325" width="0.8895%" height="15" fill="rgb(248,9,4)" fg:x="465" fg:w="7"/><text x="59.3351%" y="335.50"></text></g><g><title>&lt;rust_decimal::decimal::Decimal as num_traits::cast::ToPrimitive&gt;::to_f64::{{closure}} (7 samples, 0.89%)</title><rect x="59.0851%" y="309" width="0.8895%" height="15" fill="rgb(210,31,22)" fg:x="465" fg:w="7"/><text x="59.3351%" y="319.50"></text></g><g><title>__floattidf (7 samples, 0.89%)</title><rect x="59.0851%" y="293" width="0.8895%" height="15" fill="rgb(239,54,39)" fg:x="465" fg:w="7"/><text x="59.3351%" y="303.50"></text></g><g><title>compiler_builtins::float::conv::__floattidf (7 samples, 0.89%)</title><rect x="59.0851%" y="277" width="0.8895%" height="15" fill="rgb(230,99,41)" fg:x="465" fg:w="7"/><text x="59.3351%" y="287.50"></text></g><g><title>core::num::&lt;impl i128&gt;::unsigned_abs (1 samples, 0.13%)</title><rect x="59.8475%" y="261" width="0.1271%" height="15" fill="rgb(253,106,12)" fg:x="471" fg:w="1"/><text x="60.0975%" y="271.50"></text></g><g><title>core::num::&lt;impl i128&gt;::wrapping_abs (1 samples, 0.13%)</title><rect x="59.8475%" y="245" width="0.1271%" height="15" fill="rgb(213,46,41)" fg:x="471" fg:w="1"/><text x="60.0975%" y="255.50"></text></g><g><title>std::f64::&lt;impl f64&gt;::powi (2 samples, 0.25%)</title><rect x="59.9746%" y="325" width="0.2541%" height="15" fill="rgb(215,133,35)" fg:x="472" fg:w="2"/><text x="60.2246%" y="335.50"></text></g><g><title>__powidf2 (2 samples, 0.25%)</title><rect x="59.9746%" y="309" width="0.2541%" height="15" fill="rgb(213,28,5)" fg:x="472" fg:w="2"/><text x="60.2246%" y="319.50"></text></g><g><title>compiler_builtins::float::pow::__powidf2 (2 samples, 0.25%)</title><rect x="59.9746%" y="293" width="0.2541%" height="15" fill="rgb(215,77,49)" fg:x="472" fg:w="2"/><text x="60.2246%" y="303.50"></text></g><g><title>compiler_builtins::float::pow::pow (2 samples, 0.25%)</title><rect x="59.9746%" y="277" width="0.2541%" height="15" fill="rgb(248,100,22)" fg:x="472" fg:w="2"/><text x="60.2246%" y="287.50"></text></g><g><title>&lt;rust_decimal::decimal::Decimal as num_traits::cast::ToPrimitive&gt;::to_f64 (45 samples, 5.72%)</title><rect x="54.8920%" y="341" width="5.7179%" height="15" fill="rgb(208,67,9)" fg:x="432" fg:w="45"/><text x="55.1420%" y="351.50">&lt;rust_d..</text></g><g><title>std::f64::&lt;impl f64&gt;::round (3 samples, 0.38%)</title><rect x="60.2287%" y="325" width="0.3812%" height="15" fill="rgb(219,133,21)" fg:x="474" fg:w="3"/><text x="60.4787%" y="335.50"></text></g><g><title>roundf32x (1 samples, 0.13%)</title><rect x="60.4828%" y="309" width="0.1271%" height="15" fill="rgb(246,46,29)" fg:x="476" fg:w="1"/><text x="60.7328%" y="319.50"></text></g><g><title>core::num::&lt;impl u128&gt;::leading_zeros (2 samples, 0.25%)</title><rect x="63.5324%" y="261" width="0.2541%" height="15" fill="rgb(246,185,52)" fg:x="500" fg:w="2"/><text x="63.7824%" y="271.50"></text></g><g><title>__floatuntidf (9 samples, 1.14%)</title><rect x="62.7700%" y="309" width="1.1436%" height="15" fill="rgb(252,136,11)" fg:x="494" fg:w="9"/><text x="63.0200%" y="319.50"></text></g><g><title>compiler_builtins::float::conv::__floatuntidf (8 samples, 1.02%)</title><rect x="62.8971%" y="293" width="1.0165%" height="15" fill="rgb(219,138,53)" fg:x="495" fg:w="8"/><text x="63.1471%" y="303.50"></text></g><g><title>compiler_builtins::float::conv::int_to_float::u128_to_f64_bits (8 samples, 1.02%)</title><rect x="62.8971%" y="277" width="1.0165%" height="15" fill="rgb(211,51,23)" fg:x="495" fg:w="8"/><text x="63.1471%" y="287.50"></text></g><g><title>core::num::&lt;impl u128&gt;::wrapping_shl (1 samples, 0.13%)</title><rect x="63.7865%" y="261" width="0.1271%" height="15" fill="rgb(247,221,28)" fg:x="502" fg:w="1"/><text x="64.0365%" y="271.50"></text></g><g><title>core::num::&lt;impl u128&gt;::unchecked_shl (1 samples, 0.13%)</title><rect x="63.7865%" y="245" width="0.1271%" height="15" fill="rgb(251,222,45)" fg:x="502" fg:w="1"/><text x="64.0365%" y="255.50"></text></g><g><title>__udivti3 (7 samples, 0.89%)</title><rect x="63.9136%" y="309" width="0.8895%" height="15" fill="rgb(217,162,53)" fg:x="503" fg:w="7"/><text x="64.1636%" y="319.50"></text></g><g><title>compiler_builtins::int::udiv::__udivti3 (7 samples, 0.89%)</title><rect x="63.9136%" y="293" width="0.8895%" height="15" fill="rgb(229,93,14)" fg:x="503" fg:w="7"/><text x="64.1636%" y="303.50"></text></g><g><title>compiler_builtins::int::specialized_div_rem::u128_div_rem (7 samples, 0.89%)</title><rect x="63.9136%" y="277" width="0.8895%" height="15" fill="rgb(209,67,49)" fg:x="503" fg:w="7"/><text x="64.1636%" y="287.50"></text></g><g><title>compiler_builtins::int::specialized_div_rem::u128_by_u64_div_rem (2 samples, 0.25%)</title><rect x="64.5489%" y="261" width="0.2541%" height="15" fill="rgb(213,87,29)" fg:x="508" fg:w="2"/><text x="64.7989%" y="271.50"></text></g><g><title>core::num::&lt;impl u128&gt;::pow (9 samples, 1.14%)</title><rect x="64.8030%" y="309" width="1.1436%" height="15" fill="rgb(205,151,52)" fg:x="510" fg:w="9"/><text x="65.0530%" y="319.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (2 samples, 0.25%)</title><rect x="65.9466%" y="309" width="0.2541%" height="15" fill="rgb(253,215,39)" fg:x="519" fg:w="2"/><text x="66.1966%" y="319.50"></text></g><g><title>&lt;rust_decimal::decimal::Decimal as num_traits::cast::ToPrimitive&gt;::to_f64::{{closure}} (2 samples, 0.25%)</title><rect x="65.9466%" y="293" width="0.2541%" height="15" fill="rgb(221,220,41)" fg:x="519" fg:w="2"/><text x="66.1966%" y="303.50"></text></g><g><title>__floattidf (2 samples, 0.25%)</title><rect x="65.9466%" y="277" width="0.2541%" height="15" fill="rgb(218,133,21)" fg:x="519" fg:w="2"/><text x="66.1966%" y="287.50"></text></g><g><title>compiler_builtins::float::conv::__floattidf (2 samples, 0.25%)</title><rect x="65.9466%" y="261" width="0.2541%" height="15" fill="rgb(221,193,43)" fg:x="519" fg:w="2"/><text x="66.1966%" y="271.50"></text></g><g><title>compiler_builtins::float::conv::int_to_float::u128_to_f64_bits (2 samples, 0.25%)</title><rect x="65.9466%" y="245" width="0.2541%" height="15" fill="rgb(240,128,52)" fg:x="519" fg:w="2"/><text x="66.1966%" y="255.50"></text></g><g><title>core::num::&lt;impl u128&gt;::leading_zeros (2 samples, 0.25%)</title><rect x="65.9466%" y="229" width="0.2541%" height="15" fill="rgb(253,114,12)" fg:x="519" fg:w="2"/><text x="66.1966%" y="239.50"></text></g><g><title>rust_decimal::decimal::Decimal::scale (2 samples, 0.25%)</title><rect x="66.2008%" y="309" width="0.2541%" height="15" fill="rgb(215,223,47)" fg:x="521" fg:w="2"/><text x="66.4508%" y="319.50"></text></g><g><title>std::f64::&lt;impl f64&gt;::powi (3 samples, 0.38%)</title><rect x="66.4549%" y="309" width="0.3812%" height="15" fill="rgb(248,225,23)" fg:x="523" fg:w="3"/><text x="66.7049%" y="319.50"></text></g><g><title>__powidf2 (3 samples, 0.38%)</title><rect x="66.4549%" y="293" width="0.3812%" height="15" fill="rgb(250,108,0)" fg:x="523" fg:w="3"/><text x="66.7049%" y="303.50"></text></g><g><title>compiler_builtins::float::pow::__powidf2 (3 samples, 0.38%)</title><rect x="66.4549%" y="277" width="0.3812%" height="15" fill="rgb(228,208,7)" fg:x="523" fg:w="3"/><text x="66.7049%" y="287.50"></text></g><g><title>compiler_builtins::float::pow::pow (3 samples, 0.38%)</title><rect x="66.4549%" y="261" width="0.3812%" height="15" fill="rgb(244,45,10)" fg:x="523" fg:w="3"/><text x="66.7049%" y="271.50"></text></g><g><title>&lt;rust_decimal::decimal::Decimal as num_traits::cast::ToPrimitive&gt;::to_f64 (44 samples, 5.59%)</title><rect x="61.7535%" y="325" width="5.5909%" height="15" fill="rgb(207,125,25)" fg:x="486" fg:w="44"/><text x="62.0035%" y="335.50">&lt;rust_d..</text></g><g><title>std::f64::&lt;impl f64&gt;::round (4 samples, 0.51%)</title><rect x="66.8361%" y="309" width="0.5083%" height="15" fill="rgb(210,195,18)" fg:x="526" fg:w="4"/><text x="67.0861%" y="319.50"></text></g><g><title>roundf32x (3 samples, 0.38%)</title><rect x="66.9632%" y="293" width="0.3812%" height="15" fill="rgb(249,80,12)" fg:x="527" fg:w="3"/><text x="67.2132%" y="303.50"></text></g><g><title>mathlib::MathExpr::eval (6 samples, 0.76%)</title><rect x="67.3443%" y="325" width="0.7624%" height="15" fill="rgb(221,65,9)" fg:x="530" fg:w="6"/><text x="67.5943%" y="335.50"></text></g><g><title>pow (21 samples, 2.67%)</title><rect x="68.1067%" y="325" width="2.6684%" height="15" fill="rgb(235,49,36)" fg:x="536" fg:w="21"/><text x="68.3567%" y="335.50">pow</text></g><g><title>[libm.so.6] (21 samples, 2.67%)</title><rect x="68.1067%" y="309" width="2.6684%" height="15" fill="rgb(225,32,20)" fg:x="536" fg:w="21"/><text x="68.3567%" y="319.50">[l..</text></g><g><title>rust_decimal::decimal::flags (2 samples, 0.25%)</title><rect x="76.2389%" y="277" width="0.2541%" height="15" fill="rgb(215,141,46)" fg:x="600" fg:w="2"/><text x="76.4889%" y="287.50"></text></g><g><title>mathlib::MathExpr::eval (131 samples, 16.65%)</title><rect x="60.6099%" y="341" width="16.6455%" height="15" fill="rgb(250,160,47)" fg:x="477" fg:w="131"/><text x="60.8599%" y="351.50">mathlib::MathExpr::eval</text></g><g><title>rust_decimal::decimal::Decimal::from_f64_retain (51 samples, 6.48%)</title><rect x="70.7751%" y="325" width="6.4803%" height="15" fill="rgb(216,222,40)" fg:x="557" fg:w="51"/><text x="71.0251%" y="335.50">rust_dec..</text></g><g><title>rust_decimal::decimal::from_f64 (51 samples, 6.48%)</title><rect x="70.7751%" y="309" width="6.4803%" height="15" fill="rgb(234,217,39)" fg:x="557" fg:w="51"/><text x="71.0251%" y="319.50">rust_dec..</text></g><g><title>rust_decimal::decimal::base2_to_decimal (50 samples, 6.35%)</title><rect x="70.9022%" y="293" width="6.3532%" height="15" fill="rgb(207,178,40)" fg:x="558" fg:w="50"/><text x="71.1522%" y="303.50">rust_dec..</text></g><g><title>rust_decimal::ops::array::mul_by_u32 (6 samples, 0.76%)</title><rect x="76.4930%" y="277" width="0.7624%" height="15" fill="rgb(221,136,13)" fg:x="602" fg:w="6"/><text x="76.7430%" y="287.50"></text></g><g><title>rust_decimal::ops::array::mul_part (6 samples, 0.76%)</title><rect x="76.4930%" y="261" width="0.7624%" height="15" fill="rgb(249,199,10)" fg:x="602" fg:w="6"/><text x="76.7430%" y="271.50"></text></g><g><title>pow (22 samples, 2.80%)</title><rect x="77.2554%" y="341" width="2.7954%" height="15" fill="rgb(249,222,13)" fg:x="608" fg:w="22"/><text x="77.5054%" y="351.50">pow</text></g><g><title>[libm.so.6] (21 samples, 2.67%)</title><rect x="77.3825%" y="325" width="2.6684%" height="15" fill="rgb(244,185,38)" fg:x="609" fg:w="21"/><text x="77.6325%" y="335.50">[l..</text></g><g><title>rust_decimal::decimal::Decimal::from_parts (1 samples, 0.13%)</title><rect x="80.3050%" y="309" width="0.1271%" height="15" fill="rgb(236,202,9)" fg:x="632" fg:w="1"/><text x="80.5550%" y="319.50"></text></g><g><title>rust_decimal::decimal::Decimal::is_zero (1 samples, 0.13%)</title><rect x="80.4320%" y="309" width="0.1271%" height="15" fill="rgb(250,229,37)" fg:x="633" fg:w="1"/><text x="80.6820%" y="319.50"></text></g><g><title>rust_decimal::arithmetic_impls::&lt;impl rust_decimal::decimal::Decimal&gt;::checked_mul (5 samples, 0.64%)</title><rect x="80.0508%" y="341" width="0.6353%" height="15" fill="rgb(206,174,23)" fg:x="630" fg:w="5"/><text x="80.3008%" y="351.50"></text></g><g><title>rust_decimal::ops::mul::mul_impl (4 samples, 0.51%)</title><rect x="80.1779%" y="325" width="0.5083%" height="15" fill="rgb(211,33,43)" fg:x="631" fg:w="4"/><text x="80.4279%" y="335.50"></text></g><g><title>rust_decimal::ops::mul::mul_by_32bit_lhs (1 samples, 0.13%)</title><rect x="80.5591%" y="309" width="0.1271%" height="15" fill="rgb(245,58,50)" fg:x="634" fg:w="1"/><text x="80.8091%" y="319.50"></text></g><g><title>mathlib::MathExpr::eval (290 samples, 36.85%)</title><rect x="52.7319%" y="357" width="36.8488%" height="15" fill="rgb(244,68,36)" fg:x="415" fg:w="290"/><text x="52.9819%" y="367.50">mathlib::MathExpr::eval</text></g><g><title>rust_decimal::decimal::Decimal::from_f64_retain (70 samples, 8.89%)</title><rect x="80.6861%" y="341" width="8.8945%" height="15" fill="rgb(232,229,15)" fg:x="635" fg:w="70"/><text x="80.9361%" y="351.50">rust_decimal:..</text></g><g><title>rust_decimal::decimal::from_f64 (70 samples, 8.89%)</title><rect x="80.6861%" y="325" width="8.8945%" height="15" fill="rgb(254,30,23)" fg:x="635" fg:w="70"/><text x="80.9361%" y="335.50">rust_decimal:..</text></g><g><title>rust_decimal::decimal::base2_to_decimal (70 samples, 8.89%)</title><rect x="80.6861%" y="309" width="8.8945%" height="15" fill="rgb(235,160,14)" fg:x="635" fg:w="70"/><text x="80.9361%" y="319.50">rust_decimal:..</text></g><g><title>rust_decimal::ops::array::mul_by_u32 (12 samples, 1.52%)</title><rect x="88.0559%" y="293" width="1.5248%" height="15" fill="rgb(212,155,44)" fg:x="693" fg:w="12"/><text x="88.3059%" y="303.50"></text></g><g><title>rust_decimal::ops::array::mul_part (12 samples, 1.52%)</title><rect x="88.0559%" y="277" width="1.5248%" height="15" fill="rgb(226,2,50)" fg:x="693" fg:w="12"/><text x="88.3059%" y="287.50"></text></g><g><title>core::convert::num::&lt;impl core::convert::From&lt;u32&gt; for u64&gt;::from (4 samples, 0.51%)</title><rect x="89.0724%" y="261" width="0.5083%" height="15" fill="rgb(234,177,6)" fg:x="701" fg:w="4"/><text x="89.3224%" y="271.50"></text></g><g><title>rust_decimal::decimal::Decimal::is_zero (3 samples, 0.38%)</title><rect x="90.0889%" y="309" width="0.3812%" height="15" fill="rgb(217,24,9)" fg:x="709" fg:w="3"/><text x="90.3389%" y="319.50"></text></g><g><title>rust_decimal::ops::add::aligned_add (1 samples, 0.13%)</title><rect x="90.4701%" y="309" width="0.1271%" height="15" fill="rgb(220,13,46)" fg:x="712" fg:w="1"/><text x="90.7201%" y="319.50"></text></g><g><title>rust_decimal::ops::common::Dec64::to_decimal (1 samples, 0.13%)</title><rect x="90.4701%" y="293" width="0.1271%" height="15" fill="rgb(239,221,27)" fg:x="712" fg:w="1"/><text x="90.7201%" y="303.50"></text></g><g><title>rust_decimal::decimal::Decimal::from_parts (1 samples, 0.13%)</title><rect x="90.4701%" y="277" width="0.1271%" height="15" fill="rgb(222,198,25)" fg:x="712" fg:w="1"/><text x="90.7201%" y="287.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_sub (1 samples, 0.13%)</title><rect x="91.3596%" y="293" width="0.1271%" height="15" fill="rgb(211,99,13)" fg:x="719" fg:w="1"/><text x="91.6096%" y="303.50"></text></g><g><title>rust_decimal::ops::add::aligned_add (3 samples, 0.38%)</title><rect x="91.4867%" y="293" width="0.3812%" height="15" fill="rgb(232,111,31)" fg:x="720" fg:w="3"/><text x="91.7367%" y="303.50"></text></g><g><title>rust_decimal::ops::common::Buf24::rescale (5 samples, 0.64%)</title><rect x="91.8679%" y="293" width="0.6353%" height="15" fill="rgb(245,82,37)" fg:x="723" fg:w="5"/><text x="92.1179%" y="303.50"></text></g><g><title>rust_decimal::ops::add::unaligned_add (16 samples, 2.03%)</title><rect x="90.5972%" y="309" width="2.0330%" height="15" fill="rgb(227,149,46)" fg:x="713" fg:w="16"/><text x="90.8472%" y="319.50">r..</text></g><g><title>rust_decimal::ops::common::Buf24::set_low64 (1 samples, 0.13%)</title><rect x="92.5032%" y="293" width="0.1271%" height="15" fill="rgb(218,36,50)" fg:x="728" fg:w="1"/><text x="92.7532%" y="303.50"></text></g><g><title>mathlib::MathExpr::eval (322 samples, 40.91%)</title><rect x="51.8424%" y="373" width="40.9149%" height="15" fill="rgb(226,80,48)" fg:x="408" fg:w="322"/><text x="52.0924%" y="383.50">mathlib::MathExpr::eval</text></g><g><title>rust_decimal::arithmetic_impls::&lt;impl rust_decimal::decimal::Decimal&gt;::checked_sub (25 samples, 3.18%)</title><rect x="89.5807%" y="357" width="3.1766%" height="15" fill="rgb(238,224,15)" fg:x="705" fg:w="25"/><text x="89.8307%" y="367.50">rus..</text></g><g><title>rust_decimal::ops::add::sub_impl (25 samples, 3.18%)</title><rect x="89.5807%" y="341" width="3.1766%" height="15" fill="rgb(241,136,10)" fg:x="705" fg:w="25"/><text x="89.8307%" y="351.50">rus..</text></g><g><title>rust_decimal::ops::add::add_sub_internal (24 samples, 3.05%)</title><rect x="89.7078%" y="325" width="3.0496%" height="15" fill="rgb(208,32,45)" fg:x="706" fg:w="24"/><text x="89.9578%" y="335.50">rus..</text></g><g><title>rust_decimal::ops::common::Dec64::new (1 samples, 0.13%)</title><rect x="92.6302%" y="309" width="0.1271%" height="15" fill="rgb(207,135,9)" fg:x="729" fg:w="1"/><text x="92.8802%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::skip::Skip&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.13%)</title><rect x="95.9339%" y="309" width="0.1271%" height="15" fill="rgb(206,86,44)" fg:x="755" fg:w="1"/><text x="96.1839%" y="319.50"></text></g><g><title>rust_decimal::decimal::Decimal::from_parts (1 samples, 0.13%)</title><rect x="96.0610%" y="309" width="0.1271%" height="15" fill="rgb(245,177,15)" fg:x="756" fg:w="1"/><text x="96.3110%" y="319.50"></text></g><g><title>rust_decimal::ops::common::Buf24::low64 (1 samples, 0.13%)</title><rect x="96.1881%" y="309" width="0.1271%" height="15" fill="rgb(206,64,50)" fg:x="757" fg:w="1"/><text x="96.4381%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::skip::Skip&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.13%)</title><rect x="98.2211%" y="293" width="0.1271%" height="15" fill="rgb(234,36,40)" fg:x="773" fg:w="1"/><text x="98.4711%" y="303.50"></text></g><g><title>core::num::&lt;impl u32&gt;::leading_zeros (2 samples, 0.25%)</title><rect x="98.3482%" y="293" width="0.2541%" height="15" fill="rgb(213,64,8)" fg:x="774" fg:w="2"/><text x="98.5982%" y="303.50"></text></g><g><title>core::num::&lt;impl u32&gt;::wrapping_sub (5 samples, 0.64%)</title><rect x="98.6023%" y="293" width="0.6353%" height="15" fill="rgb(210,75,36)" fg:x="776" fg:w="5"/><text x="98.8523%" y="303.50"></text></g><g><title>__libc_start_main_alias_2 (780 samples, 99.11%)</title><rect x="0.2541%" y="773" width="99.1105%" height="15" fill="rgb(229,88,21)" fg:x="2" fg:w="780"/><text x="0.5041%" y="783.50">__libc_start_main_alias_2</text></g><g><title>__libc_start_call_main (780 samples, 99.11%)</title><rect x="0.2541%" y="757" width="99.1105%" height="15" fill="rgb(252,204,47)" fg:x="2" fg:w="780"/><text x="0.5041%" y="767.50">__libc_start_call_main</text></g><g><title>main (780 samples, 99.11%)</title><rect x="0.2541%" y="741" width="99.1105%" height="15" fill="rgb(208,77,27)" fg:x="2" fg:w="780"/><text x="0.5041%" y="751.50">main</text></g><g><title>std::rt::lang_start_internal (780 samples, 99.11%)</title><rect x="0.2541%" y="725" width="99.1105%" height="15" fill="rgb(221,76,26)" fg:x="2" fg:w="780"/><text x="0.5041%" y="735.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (780 samples, 99.11%)</title><rect x="0.2541%" y="709" width="99.1105%" height="15" fill="rgb(225,139,18)" fg:x="2" fg:w="780"/><text x="0.5041%" y="719.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (780 samples, 99.11%)</title><rect x="0.2541%" y="693" width="99.1105%" height="15" fill="rgb(230,137,11)" fg:x="2" fg:w="780"/><text x="0.5041%" y="703.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (780 samples, 99.11%)</title><rect x="0.2541%" y="677" width="99.1105%" height="15" fill="rgb(212,28,1)" fg:x="2" fg:w="780"/><text x="0.5041%" y="687.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (780 samples, 99.11%)</title><rect x="0.2541%" y="661" width="99.1105%" height="15" fill="rgb(248,164,17)" fg:x="2" fg:w="780"/><text x="0.5041%" y="671.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (780 samples, 99.11%)</title><rect x="0.2541%" y="645" width="99.1105%" height="15" fill="rgb(222,171,42)" fg:x="2" fg:w="780"/><text x="0.5041%" y="655.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (780 samples, 99.11%)</title><rect x="0.2541%" y="629" width="99.1105%" height="15" fill="rgb(243,84,45)" fg:x="2" fg:w="780"/><text x="0.5041%" y="639.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (780 samples, 99.11%)</title><rect x="0.2541%" y="613" width="99.1105%" height="15" fill="rgb(252,49,23)" fg:x="2" fg:w="780"/><text x="0.5041%" y="623.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (780 samples, 99.11%)</title><rect x="0.2541%" y="597" width="99.1105%" height="15" fill="rgb(215,19,7)" fg:x="2" fg:w="780"/><text x="0.5041%" y="607.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (780 samples, 99.11%)</title><rect x="0.2541%" y="581" width="99.1105%" height="15" fill="rgb(238,81,41)" fg:x="2" fg:w="780"/><text x="0.5041%" y="591.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (780 samples, 99.11%)</title><rect x="0.2541%" y="565" width="99.1105%" height="15" fill="rgb(210,199,37)" fg:x="2" fg:w="780"/><text x="0.5041%" y="575.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (780 samples, 99.11%)</title><rect x="0.2541%" y="549" width="99.1105%" height="15" fill="rgb(244,192,49)" fg:x="2" fg:w="780"/><text x="0.5041%" y="559.50">core::ops::function::FnOnce::call_once</text></g><g><title>stddev::main (780 samples, 99.11%)</title><rect x="0.2541%" y="533" width="99.1105%" height="15" fill="rgb(226,211,11)" fg:x="2" fg:w="780"/><text x="0.5041%" y="543.50">stddev::main</text></g><g><title>stddev::stddev (728 samples, 92.50%)</title><rect x="6.8615%" y="517" width="92.5032%" height="15" fill="rgb(236,162,54)" fg:x="54" fg:w="728"/><text x="7.1115%" y="527.50">stddev::stddev</text></g><g><title>mathlib::MathExpr::eval (399 samples, 50.70%)</title><rect x="48.6658%" y="501" width="50.6989%" height="15" fill="rgb(220,229,9)" fg:x="383" fg:w="399"/><text x="48.9158%" y="511.50">mathlib::MathExpr::eval</text></g><g><title>mathlib::MathExpr::eval (399 samples, 50.70%)</title><rect x="48.6658%" y="485" width="50.6989%" height="15" fill="rgb(250,87,22)" fg:x="383" fg:w="399"/><text x="48.9158%" y="495.50">mathlib::MathExpr::eval</text></g><g><title>mathlib::MathExpr::eval (377 samples, 47.90%)</title><rect x="51.4612%" y="469" width="47.9034%" height="15" fill="rgb(239,43,17)" fg:x="405" fg:w="377"/><text x="51.7112%" y="479.50">mathlib::MathExpr::eval</text></g><g><title>core::iter::traits::iterator::Iterator::reduce (377 samples, 47.90%)</title><rect x="51.4612%" y="453" width="47.9034%" height="15" fill="rgb(231,177,25)" fg:x="405" fg:w="377"/><text x="51.7112%" y="463.50">core::iter::traits::iterator::Iterator::reduce</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (377 samples, 47.90%)</title><rect x="51.4612%" y="437" width="47.9034%" height="15" fill="rgb(219,179,1)" fg:x="405" fg:w="377"/><text x="51.7112%" y="447.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (377 samples, 47.90%)</title><rect x="51.4612%" y="421" width="47.9034%" height="15" fill="rgb(238,219,53)" fg:x="405" fg:w="377"/><text x="51.7112%" y="431.50">core::iter::traits::iterator::Iterator::fold</text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (375 samples, 47.65%)</title><rect x="51.7154%" y="405" width="47.6493%" height="15" fill="rgb(232,167,36)" fg:x="407" fg:w="375"/><text x="51.9654%" y="415.50">core::iter::adapters::map::map_fold::{{closure}}</text></g><g><title>mathlib::MathExpr::eval::{{closure}} (375 samples, 47.65%)</title><rect x="51.7154%" y="389" width="47.6493%" height="15" fill="rgb(244,19,51)" fg:x="407" fg:w="375"/><text x="51.9654%" y="399.50">mathlib::MathExpr::eval::{{closure}}</text></g><g><title>rust_decimal::arithmetic_impls::&lt;impl rust_decimal::decimal::Decimal&gt;::checked_add (52 samples, 6.61%)</title><rect x="92.7573%" y="373" width="6.6074%" height="15" fill="rgb(224,6,22)" fg:x="730" fg:w="52"/><text x="93.0073%" y="383.50">rust_deci..</text></g><g><title>rust_decimal::ops::add::add_impl (46 samples, 5.84%)</title><rect x="93.5197%" y="357" width="5.8450%" height="15" fill="rgb(224,145,5)" fg:x="736" fg:w="46"/><text x="93.7697%" y="367.50">rust_de..</text></g><g><title>rust_decimal::ops::add::add_sub_internal (45 samples, 5.72%)</title><rect x="93.6468%" y="341" width="5.7179%" height="15" fill="rgb(234,130,49)" fg:x="737" fg:w="45"/><text x="93.8968%" y="351.50">rust_de..</text></g><g><title>rust_decimal::ops::add::unaligned_add (42 samples, 5.34%)</title><rect x="94.0280%" y="325" width="5.3367%" height="15" fill="rgb(254,6,2)" fg:x="740" fg:w="42"/><text x="94.2780%" y="335.50">rust_de..</text></g><g><title>rust_decimal::ops::common::Buf24::rescale (24 samples, 3.05%)</title><rect x="96.3151%" y="309" width="3.0496%" height="15" fill="rgb(208,96,46)" fg:x="758" fg:w="24"/><text x="96.5651%" y="319.50">rus..</text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1 samples, 0.13%)</title><rect x="99.2376%" y="293" width="0.1271%" height="15" fill="rgb(239,3,39)" fg:x="781" fg:w="1"/><text x="99.4876%" y="303.50"></text></g><g><title>[unknown] (1 samples, 0.13%)</title><rect x="99.3647%" y="757" width="0.1271%" height="15" fill="rgb(233,210,1)" fg:x="782" fg:w="1"/><text x="99.6147%" y="767.50"></text></g><g><title>[unknown] (1 samples, 0.13%)</title><rect x="99.3647%" y="741" width="0.1271%" height="15" fill="rgb(244,137,37)" fg:x="782" fg:w="1"/><text x="99.6147%" y="751.50"></text></g><g><title>[unknown] (1 samples, 0.13%)</title><rect x="99.3647%" y="725" width="0.1271%" height="15" fill="rgb(240,136,2)" fg:x="782" fg:w="1"/><text x="99.6147%" y="735.50"></text></g><g><title>[unknown] (1 samples, 0.13%)</title><rect x="99.3647%" y="709" width="0.1271%" height="15" fill="rgb(239,18,37)" fg:x="782" fg:w="1"/><text x="99.6147%" y="719.50"></text></g><g><title>_dl_sysdep_parse_arguments (1 samples, 0.13%)</title><rect x="99.4917%" y="725" width="0.1271%" height="15" fill="rgb(218,185,22)" fg:x="783" fg:w="1"/><text x="99.7417%" y="735.50"></text></g><g><title>[unknown] (1 samples, 0.13%)</title><rect x="99.4917%" y="709" width="0.1271%" height="15" fill="rgb(225,218,4)" fg:x="783" fg:w="1"/><text x="99.7417%" y="719.50"></text></g><g><title>_dl_start_final (2 samples, 0.25%)</title><rect x="99.4917%" y="757" width="0.2541%" height="15" fill="rgb(230,182,32)" fg:x="783" fg:w="2"/><text x="99.7417%" y="767.50"></text></g><g><title>_dl_sysdep_start (2 samples, 0.25%)</title><rect x="99.4917%" y="741" width="0.2541%" height="15" fill="rgb(242,56,43)" fg:x="783" fg:w="2"/><text x="99.7417%" y="751.50"></text></g><g><title>dl_main (1 samples, 0.13%)</title><rect x="99.6188%" y="725" width="0.1271%" height="15" fill="rgb(233,99,24)" fg:x="784" fg:w="1"/><text x="99.8688%" y="735.50"></text></g><g><title>_dl_relocate_object (1 samples, 0.13%)</title><rect x="99.6188%" y="709" width="0.1271%" height="15" fill="rgb(234,209,42)" fg:x="784" fg:w="1"/><text x="99.8688%" y="719.50"></text></g><g><title>_dl_lookup_symbol_x (1 samples, 0.13%)</title><rect x="99.6188%" y="693" width="0.1271%" height="15" fill="rgb(227,7,12)" fg:x="784" fg:w="1"/><text x="99.8688%" y="703.50"></text></g><g><title>do_lookup_x (1 samples, 0.13%)</title><rect x="99.6188%" y="677" width="0.1271%" height="15" fill="rgb(245,203,43)" fg:x="784" fg:w="1"/><text x="99.8688%" y="687.50"></text></g><g><title>check_match (1 samples, 0.13%)</title><rect x="99.6188%" y="661" width="0.1271%" height="15" fill="rgb(238,205,33)" fg:x="784" fg:w="1"/><text x="99.8688%" y="671.50"></text></g><g><title>elf_get_dynamic_info (1 samples, 0.13%)</title><rect x="99.7459%" y="757" width="0.1271%" height="15" fill="rgb(231,56,7)" fg:x="785" fg:w="1"/><text x="99.9959%" y="767.50"></text></g><g><title>all (787 samples, 100%)</title><rect x="0.0000%" y="821" width="100.0000%" height="15" fill="rgb(244,186,29)" fg:x="0" fg:w="787"/><text x="0.2500%" y="831.50"></text></g><g><title>stddev (787 samples, 100.00%)</title><rect x="0.0000%" y="805" width="100.0000%" height="15" fill="rgb(234,111,31)" fg:x="0" fg:w="787"/><text x="0.2500%" y="815.50">stddev</text></g><g><title>_start (787 samples, 100.00%)</title><rect x="0.0000%" y="789" width="100.0000%" height="15" fill="rgb(241,149,10)" fg:x="0" fg:w="787"/><text x="0.2500%" y="799.50">_start</text></g><g><title>_dl_start (5 samples, 0.64%)</title><rect x="99.3647%" y="773" width="0.6353%" height="15" fill="rgb(249,206,44)" fg:x="782" fg:w="5"/><text x="99.6147%" y="783.50"></text></g><g><title>rtld_timer_start (1 samples, 0.13%)</title><rect x="99.8729%" y="757" width="0.1271%" height="15" fill="rgb(251,153,30)" fg:x="786" fg:w="1"/><text x="100.1229%" y="767.50"></text></g><g><title>[unknown] (1 samples, 0.13%)</title><rect x="99.8729%" y="741" width="0.1271%" height="15" fill="rgb(239,152,38)" fg:x="786" fg:w="1"/><text x="100.1229%" y="751.50"></text></g><g><title>[unknown] (1 samples, 0.13%)</title><rect x="99.8729%" y="725" width="0.1271%" height="15" fill="rgb(249,139,47)" fg:x="786" fg:w="1"/><text x="100.1229%" y="735.50"></text></g><g><title>[unknown] (1 samples, 0.13%)</title><rect x="99.8729%" y="709" width="0.1271%" height="15" fill="rgb(244,64,35)" fg:x="786" fg:w="1"/><text x="100.1229%" y="719.50"></text></g><g><title>[unknown] (1 samples, 0.13%)</title><rect x="99.8729%" y="693" width="0.1271%" height="15" fill="rgb(216,46,15)" fg:x="786" fg:w="1"/><text x="100.1229%" y="703.50"></text></g><g><title>[unknown] (1 samples, 0.13%)</title><rect x="99.8729%" y="677" width="0.1271%" height="15" fill="rgb(250,74,19)" fg:x="786" fg:w="1"/><text x="100.1229%" y="687.50"></text></g><g><title>[unknown] (1 samples, 0.13%)</title><rect x="99.8729%" y="661" width="0.1271%" height="15" fill="rgb(249,42,33)" fg:x="786" fg:w="1"/><text x="100.1229%" y="671.50"></text></g></svg></svg>